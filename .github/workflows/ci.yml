name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  CI: true
  SKIP_ENV_VALIDATION: 'true'
  NEXTAUTH_SECRET: 'ci-fallback-secret-key-for-build-only'
  NEXTAUTH_URL: 'http://localhost:3000'

jobs:
  # Code Quality & Security
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: ESLint check
      run: npm run lint
      
    - name: TypeScript check
      run: npm run type-check
      continue-on-error: true
      
    - name: Security audit
      run: npm audit --audit-level moderate
      continue-on-error: true
      
    - name: Bundle analysis
      run: |
        echo "📐 Bundle analizi başlatılıyor..."
        npm run build:analyze > analyze.log 2>&1 || echo "Bundle analizi tamamlandı"
        echo "✅ Bundle analizi raporu oluşturuldu"
      env:
        ANALYZE: true
      continue-on-error: true

  # Testing
  test:
    name: Testing
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run configuration tests
      run: npm run test:config
      env:
        SKIP_ENV_VALIDATION: 'true'
        CI: 'true'
        
    - name: Run unit tests
      run: npm run test -- --passWithNoTests
      env:
        SKIP_ENV_VALIDATION: 'true'
        CI: 'true'
      
    - name: Security test
      run: npm run security:test
      env:
        CI: 'true'
      continue-on-error: true

  # Build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci

    - name: Set build env with fallbacks
      shell: bash
      run: |
        # Prefer secrets if provided; otherwise use global fallbacks with validation
        if [ -n "${{ secrets.NEXTAUTH_SECRET }}" ]; then 
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> $GITHUB_ENV
          echo "✅ NEXTAUTH_SECRET loaded from secrets"
        else
          echo "NEXTAUTH_SECRET=${{ env.NEXTAUTH_SECRET }}" >> $GITHUB_ENV
          echo "⚠️ NEXTAUTH_SECRET using fallback value"
        fi
        
        if [ -n "${{ secrets.NEXTAUTH_URL }}" ]; then 
          echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> $GITHUB_ENV
          echo "✅ NEXTAUTH_URL loaded from secrets"
        else
          echo "NEXTAUTH_URL=${{ env.NEXTAUTH_URL }}" >> $GITHUB_ENV
          echo "⚠️ NEXTAUTH_URL using fallback value"
        fi
        
        # MongoDB fallback for CI
        if [ -n "${{ secrets.MONGODB_URI }}" ]; then 
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> $GITHUB_ENV
          echo "✅ MONGODB_URI loaded from secrets"
        else
          echo "MONGODB_URI=mongodb://localhost:27017/personal-blog-ci" >> $GITHUB_ENV
          echo "⚠️ MONGODB_URI using CI fallback"
        fi
      
    - name: Build application
      run: npm run build
      env:
        NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
        NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
        SKIP_ENV_VALIDATION: 'true'
        CI: 'true'
        NODE_ENV: 'production'
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: .next/
        retention-days: 1

  # 🚀 Deploy Notification (manual deployment recommended)
  deploy-notification:
    name: 🚀 Deploy Notification
    runs-on: ubuntu-latest
    needs: [quality, test, build]
    # Sadece main branch için çalıştır
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      actions: read
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📝 Deployment Ready Notification
      run: |
        echo "✅ Build başarılı! Manuel deployment için 'npm run deploy' komutunu kullanabilirsiniz."
        echo "🔗 Current Live Site: https://fixral.com"
        echo "🚀 Build tamamlandı - Deployment için hazır!"

  # 📊 Performance Testing (optional)
  performance:
    name: 📊 Performance Testing
    runs-on: ubuntu-latest
    needs: build
    # PR'larda ve main branch push'larda çalıştır
    if: github.event_name == 'pull_request' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Performance test
      run: npm run perf:check
      continue-on-error: true

  # Automatic Deploy to Vercel (optional, runs only if secrets are present)
  deploy:
    name: 🚀 Deploy to Vercel (Prod)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Prepare env
      shell: bash
      run: |
        if [ -n "${{ secrets.NEXTAUTH_SECRET }}" ]; then
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> $GITHUB_ENV
          echo "✅ NEXTAUTH_SECRET from secrets";
        else
          echo "NEXTAUTH_SECRET=${{ env.NEXTAUTH_SECRET }}" >> $GITHUB_ENV
          echo "⚠️ NEXTAUTH_SECRET using fallback";
        fi

        if [ -n "${{ secrets.NEXTAUTH_URL }}" ]; then
          echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> $GITHUB_ENV
          echo "✅ NEXTAUTH_URL from secrets";
        else
          echo "NEXTAUTH_URL=${{ env.NEXTAUTH_URL }}" >> $GITHUB_ENV
          echo "⚠️ NEXTAUTH_URL using fallback";
        fi

        if [ -n "${{ secrets.MONGODB_URI }}" ]; then
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> $GITHUB_ENV
          echo "✅ MONGODB_URI from secrets";
        else
          echo "MONGODB_URI=mongodb://localhost:27017/personal-blog-ci" >> $GITHUB_ENV
          echo "⚠️ MONGODB_URI using CI fallback";
        fi

        echo "SKIP_ENV_VALIDATION=true" >> $GITHUB_ENV

    - name: Install Vercel CLI
      if: env.VERCEL_TOKEN != ''
      run: npm install -g vercel@latest

    - name: Vercel Build (prebuilt output)
      if: env.VERCEL_TOKEN != ''
      run: vercel build --prod --yes --token=${{ env.VERCEL_TOKEN }}

    - name: Vercel Deploy (prod)
      if: env.VERCEL_TOKEN != ''
      run: vercel deploy --prebuilt --prod --yes --token=${{ env.VERCEL_TOKEN }}